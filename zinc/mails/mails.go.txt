package mails

import (
	"fmt"
	"index_data_zinc/config"
	"index_data_zinc/utils"
	"index_data_zinc/zinc"
	"log"
	"os"
	"path/filepath"
	"strings"
	"sync"
)

func ProcessEmails(mailDir string) error {
	var wg sync.WaitGroup
	files := make(chan string, 1000) // Canal para pasar rutas de archivos

	// Iniciar trabajadores
	for i := 0; i < config.NumWorkers; i++ {
		wg.Add(1)
		go worker(i, files, &wg)
	}

	// Explorar el directorio y enviar rutas de archivos al canal
	err := filepath.Walk(mailDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			log.Printf("Error accediendo a %q: %v\n", path, err)
			return err
		}
		if info.IsDir() || !utils.IsEmailFile(path) {
			return nil
		}
		files <- path // Enviar la ruta al canal
		return nil
	})
	if err != nil {
		log.Fatalf("Error al recorrer el directorio: %v", err)
	}

	close(files) // Cerrar el canal cuando termine el recorrido
	wg.Wait()    // Esperar a que todos los trabajadores terminen

	fmt.Println("Procesamiento completo")
	return nil
}

func worker(id int, files <-chan string, wg *sync.WaitGroup) {
	defer wg.Done()
	var batch []zinc.EmailDocument

	for filePath := range files {
		email, err := utils.ParseEmailFile(filePath)
		if err != nil {
			log.Printf("Worker %d: Error al analizar archivo %s: %v", id, filePath, err)
			continue
		}

		// Extraer información del usuario y carpeta
		pathParts := strings.Split(filepath.ToSlash(filePath), "/")
		if len(pathParts) >= 2 {
			email.User = pathParts[0]
			email.FolderPath = strings.Join(pathParts[1:len(pathParts)-1], "/")
		}

		batch = append(batch, *email)

		// Enviar lote cuando alcance el tamaño configurado
		if len(batch) >= config.BatchSize {
			if err := sendBatchToZinc(id, batch); err != nil {
				log.Printf("Worker %d: Error enviando lote: %v", id, err)
			}
			batch = nil // Reiniciar el lote
		}
	}

	// Enviar los documentos restantes en el lote
	if len(batch) > 0 {
		if err := sendBatchToZinc(id, batch); err != nil {
			log.Printf("Worker %d: Error enviando lote final: %v", id, err)
		}
	}
}

func sendBatchToZinc(workerID int, batch []zinc.EmailDocument) error {
	log.Printf("Worker %d: Enviando lote de tamaño %d", workerID, len(batch))
	return zinc.SendBulkToZinc(batch)
}
